"use strict";(self.webpackChunksinnammanyo_cn=self.webpackChunksinnammanyo_cn||[]).push([[8633],{68614:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>_,metadata:()=>r,toc:()=>o});var i=t(87462),a=(t(67294),t(3905));t(83989);const _={id:"esp32-demo-wifi-scan",title:"",sidebar_label:"Wi-Fi Scan"},s="ESP32 Demo Wi-Fi Scan",r={unversionedId:"devices/esp32/wifi/esp32-demo-wifi-scan",id:"devices/esp32/wifi/esp32-demo-wifi-scan",title:"",description:"name | version",source:"@site/docs/stack/devices/esp32/wifi/esp32-demo-wifi-scan.md",sourceDirName:"devices/esp32/wifi",slug:"/devices/esp32/wifi/esp32-demo-wifi-scan",permalink:"/stack/devices/esp32/wifi/esp32-demo-wifi-scan",draft:!1,editUrl:"https://github.com/rcxxx/sinnammanyo.cn/tree/master/docs/stack/devices/esp32/wifi/esp32-demo-wifi-scan.md",tags:[],version:"current",frontMatter:{id:"esp32-demo-wifi-scan",title:"",sidebar_label:"Wi-Fi Scan"},sidebar:"\ud83d\udd0c devices",previous:{title:"Demo Wifi",permalink:"/stack/devices/esp32/wifi/esp32-demo-wifi"},next:{title:"Tcp Server",permalink:"/stack/devices/esp32/wifi/esp32-demo-tcp-server"}},p={},o=[{value:"Wi-Fi Init",id:"wi-fi-init",level:2},{value:"Wi-Fi Scan",id:"wi-fi-scan",level:2},{value:"\u793a\u4f8b\u7a0b\u5e8f",id:"\u793a\u4f8b\u7a0b\u5e8f",level:3},{value:"FreeRTOS Event Group Wi-Fi Scan",id:"freertos-event-group-wi-fi-scan",level:2},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2}],c={toc:o};function l(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"esp32-demo-wi-fi-scan"},"ESP32 Demo Wi-Fi Scan"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:"center"},"version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"System"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"https://releases.ubuntu.com/20.04/"},"Ubuntu 20.04")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"CMake"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"https://cmake.org/"},"3.10"))," \u2265")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ESP-IDF"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/espressif/esp-idf"},"master--v5.1")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ESP-IDF Programming GuideLogo"),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"https://docs.espressif.com/projects/esp-idf/en/release-v5.1/esp32/index.html"},"v5.1")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Device"),(0,a.kt)("td",{parentName:"tr",align:"center"},"ESP32-S3-WROOM-1")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u521b\u5efa\u7a7a\u9879\u76ee")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6fc0\u6d3b\u73af\u5883")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},". ~/esp/esp-idf/export.sh \n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u521b\u5efa\u9879\u76ee")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"idf.py create-project ${project_name}\n")),(0,a.kt)("p",null,"\u5173\u4e8e\u9879\u76ee ",(0,a.kt)("inlineCode",{parentName:"p"},"CMake")," \u7684\u914d\u7f6e\u53ef\u4ee5\u53c2\u7167"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},(0,a.kt)("a",{parentName:"em",href:"https://sinnammanyo.cn/stack/devices/esp32/esp32-idf-Clion-env"},"\u5728 CLion \u4e2d\u914d\u7f6e ESP_CMake \u9879\u76ee")))),(0,a.kt)("h2",{id:"wi-fi-init"},"Wi-Fi Init"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "esp_wifi.h"\n#include "nvs_flash.h"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'ESP_LOGI("WIFI", "0. \u521d\u59cb\u5316NVS\u5b58\u50a8");\nesp_err_t ret = nvs_flash_init();\nif (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n{\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    ret = nvs_flash_init();\n}\nESP_ERROR_CHECK(ret);\n\nESP_LOGI("WIFI", "1. Wi-Fi \u521d\u59cb\u5316");\nESP_ERROR_CHECK(esp_netif_init());\nESP_ERROR_CHECK(esp_event_loop_create_default());\nesp_netif_create_default_wifi_sta();\n\nwifi_init_config_t wifi_config = WIFI_INIT_CONFIG_DEFAULT();\nESP_ERROR_CHECK(esp_wifi_init(&wifi_config));\n\nESP_LOGI("WIFI", "\u521b\u5efa APP TASK \u548c Event Group");\ns_wifi_envent_group = xEventGroupCreate();\nxTaskCreate(app_task, "APP TASK", 1024 * 12, NULL, 1, NULL);\n\nESP_LOGI("WIFI", "2. Wi-Fi \u914d\u7f6e");\nESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\nESP_LOGI("WIFI", "3. Wi-Fi \u542f\u52a8");\nESP_ERROR_CHECK(esp_wifi_start());\n')),(0,a.kt)("h2",{id:"wi-fi-scan"},"Wi-Fi Scan"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "esp_wifi.h"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e\u56fd\u5bb6/\u5730\u533a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"esp_err_t esp_wifi_set_country(const wifi_country_t *country);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5f00\u59cb\u626b\u63cf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"esp_err_t esp_wifi_scan_start(const wifi_scan_config_t *config, bool block);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u626b\u63cf\u5230\u7684 ap \u6570\u91cf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"esp_err_t esp_wifi_scan_get_ap_num(uint16_t *number);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u626b\u63cf\u8bb0\u5f55")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"esp_err_t esp_wifi_scan_get_ap_records(uint16_t *number, wifi_ap_record_t *ap_records);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wifi_ap_record_t *ap_records")," \u7ed3\u6784\u4f53\u5b9a\u4e49")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"/** @brief Description of a WiFi AP */\ntypedef struct {\n    uint8_t bssid[6];                     /**< MAC address of AP */\n    uint8_t ssid[33];                     /**< SSID of AP */\n    uint8_t primary;                      /**< channel of AP */\n    wifi_second_chan_t second;            /**< secondary channel of AP */\n    int8_t  rssi;                         /**< signal strength of AP */\n    wifi_auth_mode_t authmode;            /**< authmode of AP */\n    wifi_cipher_type_t pairwise_cipher;   /**< pairwise cipher of AP */\n    wifi_cipher_type_t group_cipher;      /**< group cipher of AP */\n    wifi_ant_t ant;                       /**< antenna used to receive beacon from AP */\n    uint32_t phy_11b:1;                   /**< bit: 0 flag to identify if 11b mode is enabled or not */\n    uint32_t phy_11g:1;                   /**< bit: 1 flag to identify if 11g mode is enabled or not */\n    uint32_t phy_11n:1;                   /**< bit: 2 flag to identify if 11n mode is enabled or not */\n    uint32_t phy_lr:1;                    /**< bit: 3 flag to identify if low rate is enabled or not */\n    uint32_t phy_11ax:1;                  /**< bit: 4 flag to identify if 11ax mode is enabled or not */\n    uint32_t wps:1;                       /**< bit: 5 flag to identify if WPS is supported or not */\n    uint32_t ftm_responder:1;             /**< bit: 6 flag to identify if FTM is supported in responder mode */\n    uint32_t ftm_initiator:1;             /**< bit: 7 flag to identify if FTM is supported in initiator mode */\n    uint32_t reserved:24;                 /**< bit: 8..31 reserved */\n    wifi_country_t country;               /**< country information of AP */\n    wifi_he_ap_info_t he_ap;              /**< HE AP info */\n} wifi_ap_record_t;\n")),(0,a.kt)("h3",{id:"\u793a\u4f8b\u7a0b\u5e8f"},"\u793a\u4f8b\u7a0b\u5e8f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <esp_wifi.h>\n#include <string.h>\n\n#include "esp_log.h"\n#include "nvs_flash.h"\n\nvoid app_main(void)\n{\n    ESP_LOGI("WIFI", "0. \u521d\u59cb\u5316 NVS \u5b58\u50a8");\n    /* \u5982\u679c\u4f7f\u80fd Wi-Fi NVS flash\uff0c\n     * \u6240\u6709\u901a\u8fc7 Wi-Fi API \u8bbe\u7f6e\u7684 Wi-Fi \u914d\u7f6e\u90fd\u4f1a\u88ab\u5b58\u50a8\u5230 flash \u4e2d\uff0c\n     * Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\u5728\u4e0b\u6b21\u5f00\u673a\u6216\u91cd\u542f\u65f6\u5c06\u81ea\u52a8\u52a0\u8f7d\u8fd9\u4e9b\u914d\u7f6e\u3002\n     * */\n    nvs_flash_init();\n\n    ESP_LOGI("WIFI", "1. Wi-Fi \u521d\u59cb\u5316\u9636\u6bb5");\n    // \u521b\u5efa\u4e00\u4e2a LwIP \u6838\u5fc3\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316 LwIP \u76f8\u5173\u5de5\u4f5c\n    esp_netif_init();\n    // \u521b\u5efa\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570\n    esp_event_loop_create_default();\n    // \u521b\u5efa\u6709 TCP/IP \u5806\u6808\u7684\u9ed8\u8ba4\u7f51\u7edc\u63a5\u53e3\u5b9e\u4f8b\u7ed1\u5b9a station\n    esp_netif_create_default_wifi_sta();\n    // \u521b\u5efa Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316 Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\n    wifi_init_config_t wifi_config = WIFI_INIT_CONFIG_DEFAULT();\n    esp_wifi_init(&wifi_config);\n\n    ESP_LOGI("WIFI", "2. Wi-Fi \u914d\u7f6e\u9636\u6bb5");\n    // \u5c06 Wi-Fi \u6a21\u5f0f\u914d\u7f6e\u4e3a station \u6a21\u5f0f\n    esp_wifi_set_mode(WIFI_MODE_STA);\n\n    ESP_LOGI("WIFI", "3. Wi-Fi \u542f\u52a8\u9636\u6bb5");\n    // \u542f\u52a8 Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\n    esp_wifi_start();\n\n    ESP_LOGI("WIFI", "4. Wi-Fi \u626b\u63cf");\n    // \u8bbe\u7f6e\u56fd\u5bb6/\u5730\u533a\u4fe1\u606f\n    wifi_country_t country_config = {\n            .cc = "CN",\n            .schan = 1,\n            .nchan = 13,\n            .policy = WIFI_COUNTRY_POLICY_AUTO,\n    };\n    esp_wifi_set_country(&country_config);\n\n    wifi_scan_config_t scan_config = {\n            .show_hidden=true\n    };\n    esp_wifi_scan_start(&scan_config, true);\n    uint16_t ap_num = 0;\n    ESP_ERROR_CHECK(esp_wifi_scan_get_ap_num(&ap_num));\n    ESP_LOGI("WIFI", "AP Count: %d", ap_num);\n\n    uint16_t max_aps = 20;\n    wifi_ap_record_t ap_records[max_aps];\n    memset(ap_records, 0, sizeof(ap_records));\n\n    uint16_t aps_count = max_aps;\n    ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&aps_count, ap_records));\n\n    ESP_LOGI("WIFI", "AP Count: %d", aps_count);\n    printf("%30s %s %s %s\\n", "SSID", "\u9891\u9053", "\u5f3a\u5ea6", "MAC\u5730\u5740");\n\n    for (int i = 0; i < aps_count; ++i) {\n        printf(\n                "%30s  %3d  %3d  %02X-%02X-%02X-%02X-%02X-%02X\\n",\n                ap_records[i].ssid,\n                ap_records[i].primary,\n                ap_records[i].rssi,\n                ap_records[i].bssid[0],\n                ap_records[i].bssid[1],\n                ap_records[i].bssid[2],\n                ap_records[i].bssid[3],\n                ap_records[i].bssid[4],\n                ap_records[i].bssid[5]\n        );\n    }\n}\n')),(0,a.kt)("p",null,"\u6267\u884c\u7ed3\u679c"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://pictures-1304295136.cos.ap-guangzhou.myqcloud.com/screenshot/esp32/demo-wifi/scan-result.png",alt:null})),(0,a.kt)("h2",{id:"freertos-event-group-wi-fi-scan"},"FreeRTOS Event Group Wi-Fi Scan"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u4f7f\u7528 FreeRTOS \u4e8b\u4ef6\u7ec4\u6267\u884c Wi-Fi \u626b\u63cf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <string.h>\n\n#include "esp_log.h"\n#include "esp_wifi.h"\n#include "nvs_flash.h"\n#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n#include "esp_task_wdt.h"\n#include "freertos/event_groups.h"\n\nstatic EventGroupHandle_t s_wifi_envent_group;\n\n#define STA_START BIT0\n#define SCAN_DONE BIT1\n\nvoid run_on_event(void *handler_arg, esp_event_base_t base, int32_t id, void *event_data)\n{\n    ESP_LOGI("EVENT_HANDEL", "BASE:%s, ID:%ld", base, id);\n\n    switch (id) {\n        case WIFI_EVENT_STA_START:\n            ESP_LOGW("EVENT_HANDEL", "WIFI_EVENT_STA_START");\n            xEventGroupSetBits(s_wifi_envent_group, STA_START);\n            break;\n        case WIFI_EVENT_SCAN_DONE:\n            ESP_LOGW("EVENT_HANDEL", "WIFI_EVENT_SCAN_DONE");\n            xEventGroupSetBits(s_wifi_envent_group, SCAN_DONE);\n            break;\n        default:\n            break;\n    }\n}\n\nvoid app_task(void *pt)\n{\n    ESP_LOGI("APP_TASK", "APP Task Create Done");\n\n    esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, run_on_event, NULL);\n\n    while(1) {\n        xEventGroupWaitBits(s_wifi_envent_group,\n                            STA_START,\n                            pdFALSE,\n                            pdFALSE,\n                            portMAX_DELAY);\n        ESP_LOGW("APP_TASK", "\u63a5\u6536\u5230 STA_START \u4e8b\u4ef6\uff0c\u6267\u884c WIFI Scan");\n        wifi_country_t country_config = {\n                .cc = "CN",\n                .schan = 1,\n                .nchan = 13,\n                .policy = WIFI_COUNTRY_POLICY_AUTO,\n        };\n        ESP_ERROR_CHECK(esp_wifi_set_country(&country_config));\n        ESP_ERROR_CHECK(esp_wifi_scan_start(NULL, false));\n\n        xEventGroupWaitBits(s_wifi_envent_group,\n                            SCAN_DONE,\n                            pdFALSE,\n                            pdFALSE,\n                            portMAX_DELAY);\n\n        ESP_LOGW("APP_TASK", "\u63a5\u6536\u5230 SCAN_DONE \u65f6\u95f4\uff0c\u8f93\u51fa Scan \u7ed3\u679c");\n        uint16_t ap_num = 0;\n        ESP_ERROR_CHECK(esp_wifi_scan_get_ap_num(&ap_num));\n        ESP_LOGI("WIFI", "AP Count: %d", ap_num);\n\n        uint16_t max_aps = 20;\n        wifi_ap_record_t ap_records[max_aps];\n        memset(ap_records, 0, sizeof(ap_records));\n\n        uint16_t aps_count = max_aps;\n        ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&aps_count, ap_records));\n\n        ESP_LOGI("WIFI", "AP Count: %d", aps_count);\n        printf("%30s %s %s %s\\n", "SSID", "\u9891\u9053", "\u5f3a\u5ea6", "MAC\u5730\u5740");\n\n        for (int i = 0; i < aps_count; ++i) {\n            printf(\n                    "%30s  %3d  %3d  %02X-%02X-%02X-%02X-%02X-%02X\\n",\n                    ap_records[i].ssid,\n                    ap_records[i].primary,\n                    ap_records[i].rssi,\n                    ap_records[i].bssid[0],\n                    ap_records[i].bssid[1],\n                    ap_records[i].bssid[2],\n                    ap_records[i].bssid[3],\n                    ap_records[i].bssid[4],\n                    ap_records[i].bssid[5]\n            );\n        }\n\n        vTaskDelete(NULL);\n    }\n}\n\nvoid app_main(void)\n{\n    ESP_LOGI("WIFI", "0. \u521d\u59cb\u5316NVS\u5b58\u50a8");\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    ESP_LOGI("WIFI", "1. Wi-Fi \u521d\u59cb\u5316");\n    ESP_ERROR_CHECK(esp_netif_init());\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    esp_netif_create_default_wifi_sta();\n\n    wifi_init_config_t wifi_config = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK(esp_wifi_init(&wifi_config));\n\n    ESP_LOGI("WIFI", "\u521b\u5efa APP TASK \u548c Event Group");\n    s_wifi_envent_group = xEventGroupCreate();\n    xTaskCreate(app_task, "APP TASK", 1024 * 12, NULL, 1, NULL);\n\n    ESP_LOGI("WIFI", "2. Wi-Fi \u914d\u7f6e");\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n    ESP_LOGI("WIFI", "3. Wi-Fi \u542f\u52a8");\n    ESP_ERROR_CHECK(esp_wifi_start());\n\n    while(1)\n    {\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n}\n')),(0,a.kt)("h2",{id:"\u53c2\u8003"},"\u53c2\u8003"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://www.bilibili.com/video/BV16G4y1g72w/?spm_id_from=333.788&vd_source=4cca3a7520260c460d94cf70a3f0a5ba"},"WIFI\u626b\u63cf - \u4e50\u946b ESP32 \u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 ESP-IDF \u5f00\u53d1\u5165\u95e8 - \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236\u51fa\u54c1")))))}l.isMDXComponent=!0}}]);