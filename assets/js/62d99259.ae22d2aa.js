"use strict";(self.webpackChunksinnammanyo_cn=self.webpackChunksinnammanyo_cn||[]).push([[9e3],{12689:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var a=n(87462),l=(n(67294),n(3905));n(83989);const i={id:"data-structures-linkedlist",title:"\u94fe\u8868",sidebar_label:"\u94fe\u8868"},d=void 0,r={unversionedId:"programming/data-structures/linkedlist/data-structures-linkedlist",id:"programming/data-structures/linkedlist/data-structures-linkedlist",title:"\u94fe\u8868",description:"\u5173\u4e8e\u94fe\u8868",source:"@site/docs/stack/programming/data-structures/linkedlist/linkedlist.md",sourceDirName:"programming/data-structures/linkedlist",slug:"/programming/data-structures/linkedlist/",permalink:"/stack/programming/data-structures/linkedlist/",draft:!1,editUrl:"https://github.com/rcxxx/sinnammanyo.cn/tree/master/docs/stack/programming/data-structures/linkedlist/linkedlist.md",tags:[],version:"current",frontMatter:{id:"data-structures-linkedlist",title:"\u94fe\u8868",sidebar_label:"\u94fe\u8868"}},s={},u=[{value:"\u5173\u4e8e\u94fe\u8868",id:"\u5173\u4e8e\u94fe\u8868",level:2},{value:"\u5355\u94fe\u8868",id:"\u5355\u94fe\u8868",level:3},{value:"\u53cc\u94fe\u8868",id:"\u53cc\u94fe\u8868",level:3},{value:"\u5faa\u73af\u94fe\u8868",id:"\u5faa\u73af\u94fe\u8868",level:3}],o={toc:u};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u5173\u4e8e\u94fe\u8868"},"\u5173\u4e8e\u94fe\u8868"),(0,l.kt)("p",null,"\u94fe\u8868\u662f\u540c\u8fc7\u6307\u9488\u5173\u8054\u5728\u4e00\u8d77\u7684\u7ebf\u6027\u5b58\u50a8\u7ed3\u6784\uff0c\u94fe\u8868\u4e0a\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u79f0\u4e3a\u4e00\u4e2a\u8282\u70b9 ",(0,l.kt)("inlineCode",{parentName:"p"},"node")),(0,l.kt)("p",null,"\u6bcf\u4e2a\u8282\u70b9\u7531\u4e24\u90e8\u5206\u7ec4\u6210"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6570\u636e\u57df\uff08\u7528\u4e8e\u5b58\u653e\u6570\u636e\uff09"),(0,l.kt)("li",{parentName:"ul"},"\u6307\u9488\u57df\uff08\u7528\u4e8e\u5b58\u653e\u5173\u8054\u5176\u4ed6\u8282\u70b9\u7684\u6307\u9488\uff09")),(0,l.kt)("p",null,"\u94fe\u8868\u7684\u7279\u70b9\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u7a7a\u95f4\u5229\u7528\u7387\u9ad8\uff0c\u5b58\u50a8\u7a7a\u95f4\u4e0d\u8fde\u7eed"),(0,l.kt)("li",{parentName:"ul"},"\u968f\u673a\u8bbf\u95ee\u6027\u80fd\u5dee")),(0,l.kt)("h3",{id:"\u5355\u94fe\u8868"},"\u5355\u94fe\u8868"),(0,l.kt)("p",null,"\u6307\u9488\u57df\u4e2d\u53ea\u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u672b\u5c3e\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u7a7a ",(0,l.kt)("inlineCode",{parentName:"p"},"nullptr")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u94fe\u8868\u7684\u5b9a\u4e49\u5982\u4e0b \u2014\u2014 C++")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u5355\u94fe\u8868\nstruct ListNode {\n    int val;  // \u8282\u70b9\u4e0a\u5b58\u50a8\u7684\u5143\u7d20\n    ListNode *next;  // \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\n    ListNode(int x) : val(x), next(NULL) {}  // \u8282\u70b9\u7684\u6784\u9020\u51fd\u6570\n};\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8868\u5934\u63d2\u5165\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void insertAtHead(ListNode*& head, int data) {\n    ListNode* new_head = new Node(data);\n    new_head->next = head;\n    head = new_head;\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8868\u5c3e\u63d2\u5165\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void insertAtTail(ListNode*& head, int data) {\n    ListNode* new_node = new Node(data);\n    if (head == nullptr) {\n        head = new_node;\n    } else {\n        ListNode* tail = head;\n        while (tail->next != nullptr) {\n            tail = tail->next;\n        }\n        tail->next = new_node;\n    }\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8868\u4e2d\u63d2\u5165\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void insertAtP(ListNode*& head, int data, int position) {\n    ListNode* new_node = new Node(data);\n    if (head == nullptr || position == 0) {\n        insertAtHead(head, data);\n    } else {\n        ListNode* curr = head;  \n        while (0 < position-- && tail->next != nullptr) {\n            curr = curr->next;\n        }\n        new_node->next = curr->next;\n        curr->next = new_node;\n    }\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5220\u9664\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"ListNode* tmp = head;\nhead = head->next;\ndelete tmp;\n")),(0,l.kt)("h3",{id:"\u53cc\u94fe\u8868"},"\u53cc\u94fe\u8868"),(0,l.kt)("h3",{id:"\u5faa\u73af\u94fe\u8868"},"\u5faa\u73af\u94fe\u8868"))}p.isMDXComponent=!0}}]);